// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_account {
  id             String  @id() @default(uuid())
  name           String
  email          String
  password       String
  avatarUrl      String?
  organizationId String

  // relations
  organization organization  @relation(fields: [organizationId], references: [id])
  transaction  transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, organizationId])
}

// organizations
model organization {
  id                   String  @id() @default(uuid())
  name                 String  @unique
  parentOrganizationId String?

  parentOrganization organization?  @relation("parentOrganization", fields: [parentOrganizationId], references: [id])
  childOrganization  organization[] @relation("parentOrganization")

  user_account user_account[]
  transaction  transaction[]
  tag          tag[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  category  category[]
}

// access_tokens
model access_token {
  id     String  @id() @default(uuid())
  token  String
  userId String
  ip     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model transaction {
  id             String   @id() @default(uuid())
  userId         String
  organizationId String
  amount         Float
  description    String?
  type           String
  date           DateTime

  // relations
  user_account user_account @relation(fields: [userId], references: [id])
  organization organization @relation(fields: [organizationId], references: [id])
  tag          tag[]
  category     category?    @relation(fields: [categoryId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  categoryId String?
}

model tag {
  id             String @id() @default(uuid())
  name           String
  color          String
  organizationId String

  // relations
  organization organization  @relation(fields: [organizationId], references: [id])
  transaction  transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model category {
  id             String @id() @default(uuid())
  name           String
  color          String
  organizationId String

  // relations
  organization organization  @relation(fields: [organizationId], references: [id])
  transaction  transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
